// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package mockschemastore -typed=true -source=store.go -destination ./mocks/store.go
//

// Package mockschemastore is a generated GoMock package.
package mockschemastore

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSchemaStore is a mock of SchemaStore interface.
type MockSchemaStore struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaStoreMockRecorder
	isgomock struct{}
}

// MockSchemaStoreMockRecorder is the mock recorder for MockSchemaStore.
type MockSchemaStoreMockRecorder struct {
	mock *MockSchemaStore
}

// NewMockSchemaStore creates a new mock instance.
func NewMockSchemaStore(ctrl *gomock.Controller) *MockSchemaStore {
	mock := &MockSchemaStore{ctrl: ctrl}
	mock.recorder = &MockSchemaStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaStore) EXPECT() *MockSchemaStoreMockRecorder {
	return m.recorder
}

// DeleteSchema mocks base method.
func (m *MockSchemaStore) DeleteSchema(ctx context.Context, schema, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", ctx, schema, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchema indicates an expected call of DeleteSchema.
func (mr *MockSchemaStoreMockRecorder) DeleteSchema(ctx, schema, version any) *MockSchemaStoreDeleteSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockSchemaStore)(nil).DeleteSchema), ctx, schema, version)
	return &MockSchemaStoreDeleteSchemaCall{Call: call}
}

// MockSchemaStoreDeleteSchemaCall wrap *gomock.Call
type MockSchemaStoreDeleteSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSchemaStoreDeleteSchemaCall) Return(arg0 error) *MockSchemaStoreDeleteSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSchemaStoreDeleteSchemaCall) Do(f func(context.Context, string, string) error) *MockSchemaStoreDeleteSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSchemaStoreDeleteSchemaCall) DoAndReturn(f func(context.Context, string, string) error) *MockSchemaStoreDeleteSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSchema mocks base method.
func (m *MockSchemaStore) GetSchema(ctx context.Context, schema, version string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", ctx, schema, version)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockSchemaStoreMockRecorder) GetSchema(ctx, schema, version any) *MockSchemaStoreGetSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockSchemaStore)(nil).GetSchema), ctx, schema, version)
	return &MockSchemaStoreGetSchemaCall{Call: call}
}

// MockSchemaStoreGetSchemaCall wrap *gomock.Call
type MockSchemaStoreGetSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSchemaStoreGetSchemaCall) Return(arg0 []byte, arg1 error) *MockSchemaStoreGetSchemaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSchemaStoreGetSchemaCall) Do(f func(context.Context, string, string) ([]byte, error)) *MockSchemaStoreGetSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSchemaStoreGetSchemaCall) DoAndReturn(f func(context.Context, string, string) ([]byte, error)) *MockSchemaStoreGetSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSchemaVersions mocks base method.
func (m *MockSchemaStore) ListSchemaVersions(ctx context.Context, schema string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersions", ctx, schema)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaVersions indicates an expected call of ListSchemaVersions.
func (mr *MockSchemaStoreMockRecorder) ListSchemaVersions(ctx, schema any) *MockSchemaStoreListSchemaVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersions", reflect.TypeOf((*MockSchemaStore)(nil).ListSchemaVersions), ctx, schema)
	return &MockSchemaStoreListSchemaVersionsCall{Call: call}
}

// MockSchemaStoreListSchemaVersionsCall wrap *gomock.Call
type MockSchemaStoreListSchemaVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSchemaStoreListSchemaVersionsCall) Return(arg0 []string, arg1 error) *MockSchemaStoreListSchemaVersionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSchemaStoreListSchemaVersionsCall) Do(f func(context.Context, string) ([]string, error)) *MockSchemaStoreListSchemaVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSchemaStoreListSchemaVersionsCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockSchemaStoreListSchemaVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSchemas mocks base method.
func (m *MockSchemaStore) ListSchemas(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas.
func (mr *MockSchemaStoreMockRecorder) ListSchemas(ctx any) *MockSchemaStoreListSchemasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockSchemaStore)(nil).ListSchemas), ctx)
	return &MockSchemaStoreListSchemasCall{Call: call}
}

// MockSchemaStoreListSchemasCall wrap *gomock.Call
type MockSchemaStoreListSchemasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSchemaStoreListSchemasCall) Return(arg0 []string, arg1 error) *MockSchemaStoreListSchemasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSchemaStoreListSchemasCall) Do(f func(context.Context) ([]string, error)) *MockSchemaStoreListSchemasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSchemaStoreListSchemasCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockSchemaStoreListSchemasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutSchema mocks base method.
func (m *MockSchemaStore) PutSchema(ctx context.Context, schema, version string, schemaData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchema", ctx, schema, version, schemaData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSchema indicates an expected call of PutSchema.
func (mr *MockSchemaStoreMockRecorder) PutSchema(ctx, schema, version, schemaData any) *MockSchemaStorePutSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchema", reflect.TypeOf((*MockSchemaStore)(nil).PutSchema), ctx, schema, version, schemaData)
	return &MockSchemaStorePutSchemaCall{Call: call}
}

// MockSchemaStorePutSchemaCall wrap *gomock.Call
type MockSchemaStorePutSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSchemaStorePutSchemaCall) Return(arg0 error) *MockSchemaStorePutSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSchemaStorePutSchemaCall) Do(f func(context.Context, string, string, []byte) error) *MockSchemaStorePutSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSchemaStorePutSchemaCall) DoAndReturn(f func(context.Context, string, string, []byte) error) *MockSchemaStorePutSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
